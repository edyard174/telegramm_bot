import requests
import datetime
import logging
import os
import random
import re
from bs4 import BeautifulSoup as b
from config import tg_bot_token, open_weather_token
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import BotDB


logging.basicConfig(level=logging.INFO)

bot = Bot(token=tg_bot_token)
dp = Dispatcher(bot)

BotDB = BotDB('account.db')

know = InlineKeyboardMarkup(row_width=1)
b5 = InlineKeyboardButton(text='–ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç', callback_data='da')
b1 = InlineKeyboardButton(text='–ë—É–≥–∞–ª—Ç–µ—Ä', callback_data='gf')
know.add(b5, b1)

kpih = InlineKeyboardMarkup(row_width=1)
b6 = InlineKeyboardButton(text='–ë–∏—Ç–∫–æ–∏–Ω', callback_data='btc')
b7 = InlineKeyboardButton(text='–≠—Ñ–∏—Ä–∏—É–º', callback_data='eth')
kpih.add(b6, b7)


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    if (not BotDB.user_exists(message.from_user.id)):
        BotDB.add_user(message.from_user.id)
    sti = open('Sticker_2.tgs', 'rb')
    await bot.send_sticker(message.chat.id, sti)
    await bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}', reply_markup=know)


@dp.message_handler(commands=("spent", "earned", "s", "e"), commands_prefix="/!")
async def start_1(message: types.Message):
    cmd_variants = (('/spent', '/s', '!spent', '!s'), ('/earned', '/e', '!earned', '!e'))
    operation = '-' if message.text.startswith(cmd_variants[0]) else '+'

    value = message.text
    for i in cmd_variants:
        for j in i:
            value = value.replace(j, '').strip()

    if (len(value)):
        x = re.findall(r"\d+(?:.\d+)?", value)
        if (len(x)):
            value = float(x[0].replace(',', '.'))

            BotDB.add_record(message.from_user.id, operation, value)

            if (operation == '-'):
                await message.reply("‚úÖ –ó–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞!")
            else:
                await message.reply("‚úÖ –ó–∞–ø–∏—Å—å –æ –¥–æ—Ö–æ–¥–µ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞!")
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É!")
    else:
        await message.reply("–ù–µ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞!")


@dp.message_handler(commands=("history", "h"), commands_prefix="/!")
async def start_2(message: types.Message):
    cmd_variants = ('/history', '/h', '!history', '!h')
    within_als = {
        "day": ('today', 'day', '—Å–µ–≥–æ–¥–Ω—è', '–¥–µ–Ω—å'),
        "month": ('month', '–º–µ—Å—è—Ü'),
        "year": ('year', '–≥–æ–¥'),
    }
    cmd = message.text
    for r in cmd_variants:
        cmd = cmd.replace(r, '').strip()
    within = 'day'
    if (len(cmd)):
        for k in within_als:
            for als in within_als[k]:
                if (als == cmd):
                    within = k
    records = BotDB.get_records(message.from_user.id, within)
    if (len(records)):
        answer = f"üïò –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ {within_als[within][-1]}\n\n"
        for r in records:
            answer += "‚ûñ –†–∞—Å—Ö–æ–¥" if not r[2] else "‚ûï –î–æ—Ö–æ–¥"
            answer += f" - {r[3]}" + " –†—É–±–ª–µ–π "
            answer += f"({r[4]})\n"
        await message.reply(answer)
    else:
        await message.reply("–ó–∞–ø–∏—Å–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")


@dp.callback_query_handler(text='gf')
async def bygalter(callback: types.CallbackQuery):
    await callback.answer('–°–º–æ—Ç—Ä–∏ —á—ë –ø–æ–∫–∞–∂—É')
    await callback.message.answer('''–ß—Ç–æ–± –∑–∞–ø–∏—Å–∞—Ç—å "‚ûï–î–æ—Ö–æ–¥‚ûï" "‚ûñ–†–∞—Å—Ö–æ–¥‚ûñ" –Ω–∞–ø–∏—à–∏ –†–∞—Å—Ö–æ–¥ –∏–ª–∏ –î–æ—Ö–æ–¥ –∏ —á–µ—Ä–µ–∑ 
									–ø—Ä–æ–±–µ–ª –ø–∏—à–µ—à—å —Å—É–º–º—É''', reply_markup=kpih)


@dp.callback_query_handler(text='da')
async def get_info_cripto(callback: types.CallbackQuery):
    await callback.answer('–©–∞ –ø–æ–∑—ã—Ä–∏–º')
    await callback.message.answer('–í—ã–±–∏—Ä–∏ –∫—Ä–∏–ø—Ç—É', reply_markup=kpih)


@dp.callback_query_handler(text='btc')
async def btc(callback: types.CallbackQuery):
    await callback.answer('–í–æ—Ç')
    resp = requests.get(url="https://yobit.net/api/3/ticker/btc_usd?ignore_invalid=1")
    data = resp.json()
    price = data['btc_usd']['avg']
    await callback.message.answer('BTC=' + str(int(price)) + '\U0001f4b2')


@dp.callback_query_handler(text='eth')
async def eth(callback: types.CallbackQuery):
    await callback.answer('–í–æ—Ç')
    resp_2 = requests.get(url="https://yobit.net/api/3/ticker/eth_usd?ignore_invalid=1")
    data_2 = resp_2.json()
    price_2 = data_2['eth_usd']['avg']
    await callback.message.answer('ETH=' + str(int(price_2)) + '\U0001f4b2')


@dp.message_handler(lambda message: '–∫—É—Ä—Å' in message.text.lower())
async def get_kyrs(message: types.Message):
    try:
        ret = message.text.lower()[5::]
        kap = message.text.upper()[5::]
        kyrs = requests.get(url=f"https://yobit.net/api/3/ticker/{ret}_usd?ignore_invalid=1")
        dait = kyrs.json()
        seg = f"{ret}_usd"
        await message.answer(f'\U00002705 –ö—É—Ä—Å {kap}=' + str(int(dait[seg]['avg'])) + '\U0001f4b2')
    except:
        await message.reply("\U0000274C –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç—ã \U0000274C")


@dp.message_handler(lambda message: '–ø–æ–≥–æ–¥–∞' in message.text.lower())
async def get_weather(message: types.Message):
    try:
        r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={message.text[7::]}&appid={open_weather_token}&units=metric")
        data = r.json()
        city = data['name']
        temp_city = data['main']['temp']
        vlaga = data['main']['humidity']
        davlenie = data['main']['pressure']
        veter = data['wind']['speed']
        rasvet = datetime.datetime.fromtimestamp(data['sys']['sunrise'])
        zakat = datetime.datetime.fromtimestamp(data['sys']['sunset'])
        den = datetime.datetime.fromtimestamp(data['sys']['sunset']) - datetime.datetime.fromtimestamp(
            data['sys']['sunrise'])

        await message.reply(f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
                            f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n"
                            f"–°—Ä–µ–¥–Ω—è—è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(temp_city)} ‚ÑÉ\n"
                            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {vlaga}\n"
                            f"–î–∞–≤–ª–µ–Ω–∏–µ: {davlenie} –º–ü–∞\n"
                            f"–í–µ—Ç–µ—Ä: {veter} –º/—Å\n"
                            f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {str(rasvet)[11:-3:]}\n"
                            f"–ó–∞–∫–∞—Ç: {str(zakat)[11:-3:]}\n"
                            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {den}"
                            )

    except:
        await message.reply("\U00002620 –ü—Ä–æ–≤–µ—Ä—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ \U00002620")


@dp.message_handler(lambda message: '–∞–Ω–µ–∫–¥–æ—Ç' in message.text.lower())
async def anecdot(message: types.Message):
    url = "https://www.nekdo.ru/"
    r = requests.get(url)
    s = b(r.text, 'html.parser')
    anecdots = s.find_all('div', class_='text')
    cls_anecdot = [c.text for c in anecdots]
    rod = cls_anecdot[random.randint(0, len(cls_anecdot))]
    await message.reply(f"{rod} \U0001F923")


if __name__ == '__main__':
    executor.start_polling(dp)
